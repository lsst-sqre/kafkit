[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "kafkit"
readme = "README.md"
description = "Kafkit helps you write Kafka producers and consumers in Python with asyncio."
license = { text = "MIT" }
authors = [
    { name = "Association of Universities for Research in Astronomy, Inc. (AURA)", email = "sqre-admin@lists.lsst.org" },
]
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = ["fastavro", "uritemplate"]
dynamic = ["version"]

[project.optional-dependencies]
aiohttp = ["aiohttp"]
httpx = ["httpx"]
pydantic = ["pydantic", "dataclasses-avroschema[pydantic]"]
aiokafka = ["aiokafka"]
dev = [
    # Testing
    "coverage[toml]",
    "pytest",
    "pytest-asyncio",
    "pre-commit",
    "mypy",
    # Documentation
    "sphinx",
    "documenteer[guide]",
]

[project.urls]
Homepage = "https://kafkit.lsst.io"
Source = "https://github.com/lsst-sqre/kafkit"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
where = ["src"]
include = ["kafkit*"]

[tool.setuptools_scm]

[tool.coverage.run]
parallel = true
branch = true
source = ["kafkit"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 79
target-version = ['py310']
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
# Multi-line strings are implicitly treated by black as regular expressions

[tool.pytest]

[tool.pytest.ini_options]
asyncio_mode = "strict"
python_files = ["tests/*.py", "tests/*/*.py"]
markers = [
    "docker", # marks tests as requiring docker-compose (deselect with '-m "not docker"')"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
exclude = [
    "docs/**",
]
line-length = 79
ignore = [
    "ANN101",  # self should not have a type annotation
    "ANN102",  # cls should not have a type annotation
    "ANN401",  # sometimes Any is the right type
    "ARG001",  # unused function arguments are often legitimate
    "ARG002",  # unused method arguments are often legitimate
    "ARG005",  # unused lambda arguments are often legitimate
    "BLE001",  # we want to catch and report Exception in background tasks
    "C414",    # nested sorted is how you sort by multiple keys with reverse
    "COM812",  # omitting trailing commas allows black autoreformatting
    "D102",    # sometimes we use docstring inheritence
    "D104",    # don't see the point of documenting every package
    "D105",    # our style doesn't require docstrings for magic methods
    "D106",    # Pydantic uses a nested Config class that doesn't warrant docs
    "D205",    # Allow multi-line summary sentences
    "EM101",   # justification (duplicate string in traceback) is silly
    "EM102",   # justification (duplicate string in traceback) is silly
    "FBT003",  # positional booleans are normal for Pydantic field defaults
    "G004",    # forbidding logging f-strings is appealing, but not our style
    "RET505",  # disagree that omitting else always makes code more readable
    "PLR0913", # factory pattern uses constructors with many arguments
    "PLR2004", # too aggressive about magic values
    "S105",    # good idea but too many false positives on non-passwords
    "S106",    # good idea but too many false positives on non-passwords
    "SIM102",  # sometimes the formatting of nested if statements is clearer
    "SIM116",  # allow if-else-if-else chains
    "SIM117",  # sometimes nested with contexts are clearer
    "TCH001",  # we decided to not maintain separate TYPE_CHECKING blocks
    "TCH002",  # we decided to not maintain separate TYPE_CHECKING blocks
    "TCH003",  # we decided to not maintain separate TYPE_CHECKING blocks
    "TID252",  # if we're going to use relative imports, use them always
    "TRY003",  # good general advice but lint is way too aggressive
]
select = ["ALL"]
target-version = "py310"

[tool.ruff.per-file-ignores]
"tests/**" = [
    "D103",    # tests don't need docstrings
    "PLR0915", # tests are allowed to be long, sometimes that's convenient
    "PT012",   # way too aggressive about limiting pytest.raises blocks
    "S101",    # tests should use assert
    "SLF001",  # tests are allowed to access private members
    "T201",    # Print is ok in tests
]

[tool.ruff.isort]
known-first-party = ["kafkit", "tests"]
split-on-trailing-comma = false

# These are too useful as attributes or methods to allow the conflict with the
# built-in to rule out their use.
[tool.ruff.flake8-builtins]
builtins-ignorelist = [
    "all",
    "any",
    "help",
    "id",
    "list",
    "type",
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "pydantic.root_validator",
    "pydantic.validator",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md"
skip_fragments = "_template.md"
